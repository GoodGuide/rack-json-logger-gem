#!/usr/bin/env ruby

require 'json'
require 'colorize'
require 'stringio'
require 'trollop'

opts = Trollop.options do
  opt :stdout, 'Print stdout.', default: false, short: 'o'
  opt :stderr, 'Print stderr.', default: false, short: 'e'
  opt :from, 'Print from.', default: true, short: 'f'
  opt :trace, 'Print full backtraces.', default: false, short: 'b'
end

STDOUT.sync = true

Signal.trap(2) do
  Process.exit(0)
end

while line = STDIN.gets
  break if line == nil

  json = JSON.parse(line) rescue nil

  json = json['data'] if json && json['data']

  if json && json.is_a?(Hash) && json['request']

    out = StringIO.new

    out.puts '     * * *'
    out.puts
    out.puts "Request: #{json['request']}".cyan
    out.puts "From: #{json['from']}".cyan if opts[:from] && json['from']
    out.puts "At: #{Time.at(json['time']).strftime('%b %-e %Y, %-l:%M%P')}"
    out.puts
    
    %w{stdout stderr}.each do |b|
      next unless opts[b.to_sym]
      color = b == 'stdout' ? :green : :yellow
      log = json[b] || ''
      if log == '' || log == "\n"
        out.puts "No #{b}.".send(color)
      else
        out.puts "#{b}:".cyan
        out.puts log.send(color)
      end
      # Typically log statements start end with a \n, so skiping puts here.
    end

    if json['exception']
      out.puts "Exception: #{json['exception']['message']}".red
      out.puts json['exception']['backtrace'].map {|e| "  #{e}"}.join("\n").blue if opts[:trace]
      out.puts
    end

    STDOUT.print(out.string)

  else
    puts line
  end

end

puts "\nEOF.".red
